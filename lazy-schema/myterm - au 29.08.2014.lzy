defineproject MYTERM/* menu */node welcome             include header,"<hr/>",             <b>("Queries<br/>"),             "Example: search: progressive lens, from english to french ",href querybysota["progressive lens%","EN","FR"]("Do a query at term level"),"<br/>",               "Example: search:tuna%, from english to french ",href querybysota["tuna%","EN","FR"]("Do a query at term level"),"<br/>",               "Example:search: progressive lens, in english ",href queryconcept["progressive lens%","EN"]("Do a query at concept level"), "<br/>",               "Example:search: tunas%, in english ",href queryconcept["tunas%","EN"]("Do a query at concept level"), "<br/>",               <b>("Statistics<br/>"),             href resources_stat("Statistics on ressources (wait ... needs to recompute all stats)<br/>"),             <b>("Manage Terms<br/>"),             href all_resources("Manage ressources"),     <b>("Test<br/>"),             href new_resources("Manage ressources")node foot         "<hr/>",href welcome("main menu")              	   node top         include header,         href welcome("main menu"),"<hr/>"       	   node header        <h2>(include olanto, " myTERM - Welcome to terminology browser - Olanto Foundation")              node olanto {<LOGO>(<COMMENT>("http://www.olanto.org"),<IMG>("olanto"))}    /* maj des ressources */node resources_stat       include top,       "statistics on resources <hr/>",       <TABLE>(       <CAPTION>( "Statistics on Resources"),       <ROW>(<CELL_TITLE>("Resource Name"),              <CELL_TITLE>("Privacy"),                        <CELL_TITLE>("Nb. Concepts"),                        <CELL_TITLE>("Languages")),       {<ROW>(<CELL>(resource_name),              <CELL>(resource_privacy),                        <CELL>(nb_concepts),                        <CELL>(expand href reslang[resource_name] ("detail"))       )}       ),       include foot       from v_rescon       order by resource_name              node all_resourcesinclude top,<TABLE>(     <CAPTION>( "<b>Ressources</b>", expand href new_resources(include ICON.new)),     {<ROW>(include resources[id_resource])})from resourcesorder by resource_namenode resources[selectid]            {<CELL_BG1>(expand href del_resources[selectid] (include ICON.del),                        expand href maj_resources[selectid] (include ICON.maj),                        href manage_concept[id_resource,"%"](resource_name)                        ),                                      <CELL>(resource_name),              <CELL>(include decode_owner[id_owner]),              <CELL>(resource_privacy),              <CELL>(resource_note)              }from resources selected by id_resource = selectid   node new_resources  {active href all_resources (   <TABLE>(<CAPTION>("Create a new ressource"), /*  <ROW>(<CELL_WARNING>("id_resource   : "),<CELL_WARNING>( set id_resource = textfield(32, "0"))), */   <ROW>(<CELL_WARNING>("resource_name : "),<CELL_WARNING>( set resource_name = textfield(32, ""))),   <ROW>(<CELL_WARNING>("id_owner      : "),<CELL_WARNING>( set id_owner = select(include list_owner["0"]))),   <ROW>(<CELL_WARNING>("resource_privacy: "),<CELL_WARNING>( set resource_privacy = select(include list_privacy["PUBLIC"]))),   <ROW>(<CELL_WARNING>("Note          : "),<CELL_WARNING>( set resource_note = textarea(3,80, "")))   ),   on "confirm insert" do insert resources,<b>("Insert a new ressource") )}node maj_resources[selectid] {active href all_resources (   <TABLE>(<CAPTION>("Modify a ressource"),   <ROW>(<CELL_WARNING>("resource_name : "),<CELL_WARNING>( set resource_name = textfield(32, resource_name))),   <ROW>(<CELL_WARNING>("id_owner      : "),<CELL_WARNING>( set id_owner = select(include list_owner[id_owner]))),   <ROW>(<CELL_WARNING>("resource_privacy: "),<CELL_WARNING>( set resource_privacy = select(include list_privacy[resource_privacy]))),   <ROW>(<CELL_WARNING>("Note          : "),<CELL_WARNING>( set resource_note = textarea(3,80, resource_note)))   ),   on "confirm update" do update resources[id_resource],<b>("Modify of: ",resource_name) )}   from resources selected by id_resource = selectidnode del_resources[selectid] {active href all_resources ( <TABLE>(<ROW>(<CELL_WARNING>( on "confirm delete" do delete resources[id_resource],<b>("Delete of: ",resource_name)))))}    from resources selected by id_resource = selectid  /* manage_concept */node manage_concept[id_resource, query]    include top,           include manage_concept_query[id_resource,query],           include manage_getresultconcept[id_resource,query],           include foot                     node  manage_concept_query[id_resource,query]          {<b>(decode_resource(id_resource)), active href queryconcept (on "Execute" do display node,                                               " Request : ", set parameter = textfield(32, _query),"<hr/>"                                      )}          node manage_getresultconcept[_id_resource,query]       <TABLE>({<ROW_ALT>(<CELL>(expand href detail_concept[id_concept](id_concept)))}       )       from concepts selected by source like query             and id_resource=_id_resource       order by id_concept limit 10               /* les noeuds statistiques */              
node detail_concept[_id_concept]       include header_concept[_id_concept],       <TABLE>(       /*<CAPTION>(include header_concept[_id_concept]),*/       {<ROW_ALT>(<CELL>(include detail_term[id_term_source])       )}       )       from v_source selected by id_concept=_id_concept       order by solang, source       /* ------------------------------------------------------------------ */node header_concept[_id_concept]        include detail_concept_resource[_id_concept],        include detail_concept_subject_field[_id_concept],        include detail_concept_definition[_id_concept],        include detail_concept_source_definition[_id_concept],  include detail_concept_note[_id_concept]        
node detail_concept_definition[_id_concept]           {"<br/>",<i>("Definition: "),concept_definition}       from concepts selected by id_concept=_id_concept and concept_definition is not null              node detail_concept_resource[_id_concept]           {<i>("Resource: "),resource_name}       from v_conceptres selected by id_concept=_id_concept              node detail_concept_subject_field[_id_concept]           {<i>(" Subject: "),subject_field}       from v_conceptres selected by id_concept=_id_concept     and subject_field is not null           node detail_concept_source_definition[_id_concept]           {"<br/>",<i>("Source defintion: "),concept_source_definition}       from concepts selected by id_concept=_id_concept     and concept_source_definition is not null              node detail_concept_note[_id_concept]           {"<br/>",<i>("Note: "),concept_note}       from concepts selected by id_concept=_id_concept     and concept_note is not null                    /* ------------------------------------------------------------------ *//* les noeuds details concepts */       
       
node detail_term[_id_term]          {<i>(include decode_lang[id_language],": "),<b>(term_form),           include detail_term_partofspeech[_id_term],           include detail_term_type[_id_term],           include detail_term_source[_id_term],           include detail_term_definition[_id_term],           include detail_term_source_definition[_id_term],           include detail_term_context[_id_term],           include detail_term_note[_id_term],           include detail_term_admin_status[_id_term]                     }       from terms selected by id_term=_id_term              node detail_term_partofspeech[_id_term]           {<i>(" (Part of speech: "),term_partofspeech,<i>(")")}       from terms selected by id_term=_id_term and term_partofspeech is not null       node detail_term_type[_id_term]           {<i>(", Type: "),term_type}       from terms selected by id_term=_id_term and term_type is not null       node detail_term_source[_id_term]           {"<br/>",<i>("Source: "),term_source}       from terms selected by id_term=_id_term and term_source is not null       node detail_term_definition[_id_term]           {"<br/>",<i>("Definition: "),term_definition}       from terms selected by id_term=_id_term and term_definition is not null       node detail_term_source_definition[_id_term]           {"<br/>",<i>("Source definition: "),term_source_definition}       from terms selected by id_term=_id_term and term_source_definition is not null       node detail_term_context[_id_term]           {"<br/>",<i>("Context: "),term_context}       from terms selected by id_term=_id_term and term_context is not null       node detail_term_note[_id_term]           {"<br/>",<i>("Note: "),term_note}       from terms selected by id_term=_id_term and term_note is not null       
node detail_term_admin_status[_id_term]           {"<br/>",<i>("Admin Status: "),term_admin_status}       from terms selected by id_term=_id_term and term_admin_status is not null                     /* ------------------------------------------------------------------ */
node detailbiterm[id_term_source,id_term_target,resource_name]       <TABLE>(       <CAPTION>( "Ressource: ",resource_name),       <ROW>(<CELL>(include detail_term[id_term_source])),       <ROW>(<CELL>(include detail_term[id_term_target]))       )                     /* query by concept */                                                                                                                   
node getresult[_query,_solang,_talang]       <TABLE>(       <CAPTION>( "Result"),       <ROW>(<CELL_TITLE>("Detail"),             <CELL_TITLE>(include decode_lang[_solang]),             <CELL_TITLE>(include decode_lang[_talang])),       {<ROW_ALT>(<CELL>(expand href detailbiterm[id_term_source,id_term_target,resource_name]("?")),              <CELL>(source),              <CELL>(target)                        )}       )       from v_sourcetarget selected by source like _query             and solang=_solang and  talang=_talang        order by source  limit 20              
node getresultconcept[_query,_solang]       <TABLE>(             <ROW>(<CELL_TITLE>("Result by concept for ", include decode_lang[_solang])),       {<ROW_ALT>(<CELL>(expand href detail_concept[id_concept](source)))}       )       from v_source selected by source like _query             and solang=_solang       order by source              /* query biterm (source,target) */              
               
node querybysota[_query,_solang,_talang]       include top,       include querymodify[_query,_solang,_talang],       include getresult[_query,_solang,_talang],       include foot               
node queryconcept[_query,_solang]       include top,       include querymodifyconcept[_query,_solang],       include getresultconcept[_query,_solang],       include foot              
node  querymodify[_query,_solang,_talang]          {active href querybysota (on "Execute" do display node,                                               " Request : ", set parameter = textfield(32, _query),                                               " Source lang. ", set parameter = select(include list_lang[_solang]),                                               " Target lang. ", set parameter = select(include list_lang[_talang]),"<hr/>"                                      )}              
node  querymodifyconcept[_query,_solang]          {active href queryconcept (on "Execute" do display node,                                               " Request : ", set parameter = textfield(32, _query),                                               " Source lang. ", set parameter = select(include list_lang[_solang]),"<hr/>"                                      )}              
node reslang[_name]       <TABLE>(       <CAPTION>( "Information on Languages"),       <ROW>(<CELL_TITLE>("ID"),             <CELL_TITLE>("Nb. Terms")),       {<ROW>(<CELL>(id_language),              <CELL>(nb_terms)       )}       )       from v_reslang selected by resource_name = _name        order by id_language                                          /* les noeuds listes */       node decode_lang[selectedvalue]       {language_default_name}       from languages selected by id_language=selectedvalue              node list_lang[selectedvalue]            {<option>(if(id_language=selectedvalue,"<selected_option/>",""),<value>(id_language),language_default_name)}          from languages           order by id_language              node decode_owner[selectedvalue]       {owner_last_name}       from owners selected by id_owner=selectedvalue       node list_owner[selectedvalue]            {<option>(if(id_owner=selectedvalue,"<selected_option/>",""),<value>(id_owner),owner_last_name)}          from owners           order by owner_last_name       	   node list_privacy[selectedvalue]            {<option>(if(label=selectedvalue,"<selected_option/>",""),<value>(label),label)}          from translations selected by id_language="EN" and type_obj="LOV_PRIVACY"          order by label       
node decode_resource[selectedvalue]       {resource_name}       from resources selected by id_resource=selectedvalue       

       end
